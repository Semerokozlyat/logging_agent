apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: logging-agent
  namespace: logging-system
  labels:
    app.kubernetes.io/name: logging-agent
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/version: "1.0.0"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: logging-agent
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: logging-agent
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: logging-agent
      hostNetwork: true
      hostPID: true
      dnsPolicy: ClusterFirstWithHostNet
      
      # Tolerations to run on all nodes including master
      tolerations:
        - operator: Exists
          effect: NoSchedule
        - operator: Exists
          effect: NoExecute
      
      # Node selector (optional - remove to run on all nodes)
      # nodeSelector:
      #   kubernetes.io/os: linux
      
      # Priority for system-level agents
      priorityClassName: system-node-critical
      
      containers:
        - name: logging-agent
          image: logging-agent:latest
          imagePullPolicy: IfNotPresent
          
          # Security context
          securityContext:
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL
              add:
                - DAC_READ_SEARCH  # Read any file
          
          # Environment variables
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LOG_LEVEL
              value: "info"
          
          # Resource limits
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          
          # Volume mounts
          volumeMounts:
            - name: varlog
              mountPath: /var/log
              readOnly: true
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: config
              mountPath: /etc/logging-agent
              readOnly: true
            - name: tmp
              mountPath: /tmp
          
          # Liveness probe
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          # Readiness probe
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          
          # Ports
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
      
      # Volumes
      volumes:
        - name: varlog
          hostPath:
            path: /var/log
            type: Directory
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
            type: DirectoryOrCreate
        - name: config
          configMap:
            name: logging-agent-config
            items:
              - key: configFile
                path: config.yaml
        - name: tmp
          emptyDir: {}
      
      # Termination grace period
      terminationGracePeriodSeconds: 30
